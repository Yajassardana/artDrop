import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { Button, ButtonGroup, Center, Container, Flex, Stack, Box ,Spacer, Textarea} from '@chakra-ui/react'

import axios from 'axios'

import { useState, useEffect } from 'react'

const inter = Inter({ subsets: ['latin'] })

export default function Home() {

  //variables

  let replicate_private_key = process.env.NEXT_PUBLIC_REPLICATE_PVT_KEY;
  //States ----------
  const [prompt, setPrompt] = useState('')
  const [generated, setGenerated] = useState(false)
  const [generatingImg, setGeneratingImg] = useState(false)

  //Functions --------
  let handlePromptChange = (e) => {
    let promptValue = e.target.value
    setPrompt(promptValue);
    console.log(prompt);
  }

  let submitPrompt = async () => {
    setGeneratingImg(true);
    await generateImage();
    setGeneratingImg(false);

  }

  let checkStatus = async (clear, id) =>{
    let st =  await axios({
        method: "get",
        url: `https://api.replicate.com/v1/predictions/${id}`,
        headers: {
            'Authorization': `Token ${replicate_private_key}`,
            'Content-Type': 'application/json',
        }
    })
    console.log(st.data);
    if(st.data.status =='succeeded'){
        console.log(st.data.output[0]);
        // genIpfsHash(st.data.output[0])
        clearInterval(clear);

    }
}
let generateImage = async() => {

  const body = {
    prompt: `${prompt}`
  };
  let bod = JSON.stringify(body)

  const response = await fetch("/api/generation", {
    method: "POST",
    headers: {
      'Authorization': `Token ${process.env.NEXT_PUBLIC_REPLICATE_PVT_KEY}`,
      'Content-Type': "application/json",
    },
    body: bod,
  });
  const prediction = await response.json();
  console.log(prediction)

    // let res = await axios({
    //     method: "post",
    //     url: "https://api.replicate.com/v1/predictions",
    //     headers: {
    //         'Authorization': `Token ${replicate_private_key}`,
    //         'Content-Type': 'application/json',
    //     },
    //     data: {
    //         'version': 'db21e45d3f7023abc2a46ee38a23973f6dce16bb082a930b0c49861f96d1e5bf',
    //         'input':{
    //             'prompt':  `${prompt}`
    //         }
    //     },
    //   });

    //   console.log(res.data);

    //   let clear = setInterval(()=>{
    //         checkStatus(clear, res.data.id);
    //   }, [2000])
}



  let grad1 = 'linear-gradient(90deg, rgba(10,116,255,1) 0%, rgba(52,122,202,1) 38%, rgba(0,228,173,1) 100%)'
  let grad2 = 'linear-gradient(90deg,rgba(0,228,173,1) 0%, rgba(52,122,202,1) 38%, rgba(10,116,255,1) 100%)'
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
      <Container marginTop='20px' maxW='550px' bg='#f5f5f5'   borderRadius='5px' > 
          <Flex direction='column' justifyContent='center'  minH='50vh'  >
          <Textarea placeholder='Enter prompt to generate AI image' width='90%'margin = '10px auto' value={prompt} onChange = {handlePromptChange} />
          <Flex direction='row' padding="20px 0  20px 0"  justifyContent='space-around'>
            <Button width='40%' background= {grad1} variant='solid' color='white' _hover={{color:'white', opacity:'70%'}} 
            onClick={submitPrompt}
            isLoading={generatingImg}
            >
              Generate Image
            </Button>
            {/* <Spacer /> */}
            <Button width='40%' background= {grad2} variant='solid' color='white'
            _hover={{color:'white', opacity:'70%'}}
              disabled={!generated}
              // isLoading={!generated}
            >
              Mint NFT
            </Button>
         </Flex>
         </Flex>
         
      </Container>
      </main>
    </>
  )
}
